const form = document.querySelector("section.top-banner form");
const input = document.querySelector(".container input#inputSearch");
const msg = document.querySelector("span.msg");
const list = document.querySelector(".ajax-section .cities");

//* apiKey bÃ¶yle olursa aÃ§Ä±kta olur ve herkes gÃ¶rÃ¼r.ÅŸifresiz hali
// localStorage.setItem("tokenKey", "6e1a3eda9fa53b82169bd49471c74f36");

//* apiKey bu ÅŸekilde ÅŸifrelendi ve localstorage atÄ±ldÄ±
// localStorage.setItem("tokenKeyEncrypted", EncryptStringAES("6e1a3eda9fa53b82169bd49471c74f36"));

//* apiKey bu ÅŸekilde ÅŸifreli halini localstorage'dan aldÄ± artÄ±k onu yazdÄ±, yukarÄ±dakilerin hepsini ve localstoregedaki ÅŸifresi keyi sildi
localStorage.setItem(
  "tokenKey",
  "0VOd5IKuoqLwiambP40GBolH3J+PNCeCh0NdDUhctd87c7ZW7ACGog8yImDcTVoJ"
);

//! eventi forma verip, submit seÃ§ince artÄ±k enter iÃ§in ilave keydown vs tanÄ±mlamaya gerek yok..
form.addEventListener("submit", (event) => {
  event.preventDefault(); //* submit sayfayÄ± herseferinde refresh yapmasÄ±n diye
  getWeatherDataFromApi();
});

let lang = "tr";
let units = "metric";
let degree = "Â°C";

//Get api func. (http method == verbs)
const getWeatherDataFromApi = async () => {
  // alert("http request is gone!")

  // localstorage'dan key'i tokenKey olan deÄŸikenin valuesini Ã§aÄŸÄ±rdÄ±k, ÅŸifreli olduÄŸundan ÅŸifre Ã§Ã¶z fonksiyonuna yolladÄ±k, bÃ¶ylece orjinal key hiÃ§ gÃ¶rÃ¼nmedi.
  const tokenKey = DecryptStringAES(localStorage.getItem("tokenKey"));
  console.log(tokenKey); // test etmek iÃ§in yazdÄ±k,
  const inputValue = input.value;
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${tokenKey}&units=${units}&lang=${lang}`;

  try {
    const response = await fetch(url).then((res) => res.json());
    // const response = await axios(url)  //! axios ile yapÄ±lÄ±ÅŸÄ±
    console.log(response);

    let { main, sys, weather, name } = response;
    name = name.replace(" Province", "");
    // const { main, sys, weather, name } = response.data; //!axios iÃ§in

    //  bunlardan sadece bir tanesi kullanÄ±lmasÄ± yeterli (OpenWeather icon)
    const iconUrl = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;

    //  bunlardan sadece bir tanesi kullanÄ±lmasÄ± yeterli (AWS icon)
    const iconUrlAWS = `https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/${weather[0].icon}.svg`;

    //* tekrarÄ± Ã¶nlemek iÃ§in kartlar oluÅŸmadan Ã¶nce sorgulama/filitreleme yapmak lazÄ±m
    //!document. demedi, Ã¶nceden oluÅŸturulan deÄŸiÅŸkenden devam etti
    const cityNameSpans = list.querySelectorAll(".city span");
    // console.log(cityNameSpans);  // nodelist olarak gelir.
    const cityNameSpansArray = Array.from(cityNameSpans); // iÅŸlem yapabilmek iÃ§in array oldu
    if (cityNameSpansArray.length > 0) {
      const filteredArray = cityNameSpansArray.filter(
        (span) => span.innerText == name
      );
      if (filteredArray.length > 0) {
        //* sonuÃ§ sÄ±fÄ±rdan bÃ¼yÃ¼k olacaÄŸÄ± iÃ§in direk uyarÄ± versin, yani eÅŸleÅŸme var
        msg.innerText = `You already know the weather for ${name}, Please search for another city ðŸ˜‰`;
        setTimeout(() => {
          msg.innerText = ""; // burada form.reset() olmaz.
        }, 3000); // 3sn sonra mesaj kaybolsun
        form.reset(); // inputu temizlemek iÃ§in
        return; //* kod kesilsin aÅŸaÄŸÄ±ya geÃ§mein diye
      }
    }

    //* best practise Ã¶nce create etmektir.
    const createdLi = document.createElement("li");
    createdLi.classList.add("city");
    createdLi.innerHTML = `
    <h2 class="city-name" data-name="${name}, ${sys.country}">
        <span>${name}</span>
        <sup>${sys.country}</sup>
    </h2>
      <div class="city-temp">${Math.round(main.temp)}<sup>${degree}</sup></div>
    <figure>
      <img class="city-icon" src="${iconUrlAWS}">
      <figcaption>${weather[0].description}</figcaption>
    </figure>
  `;
    //* figure ve figcaption kullanÄ±mÄ±:  SEO aÃ§Ä±sÄ±ndan google algoritmasÄ±nda daha Ã¶ncelikli

    //* append / prepend
    // list.append(createdLi);  bÃ¶yle yazÄ±lÄ±rsa ilk yazÄ±lan baÅŸta kalÄ±r yenisi saÄŸÄ±na gelir

    list.prepend(createdLi); //* bÃ¶yle yazÄ±lÄ±rsa hep son yazÄ±lan baÅŸta kalÄ±r.

    // form.reset(); //* inputun iÃ§ini boÅŸaltmak iÃ§in, hem try hemde catch de vardÄ±, 2 tane gerek yok, en dÄ±ÅŸa bir tane yazdÄ±k ve diÄŸerlerini kaldÄ±rdÄ±k.

    //!Capturing --> ile ikonlarÄ± deÄŸÅŸtirme
    createdLi.addEventListener("click", (e) => {
      if (e.target.tagName == "IMG") {
        //*tagnme bÃ¼yÃ¼k harf gelir.
        e.target.src = e.target.src == iconUrl ? iconUrlAWS : iconUrl;
      } else if (e.target.classList.contains("city-temp")) {
        units == "metric" ? (units = "imperial") : (units = "metric");
        degree == "Â°C" ? (degree = "Â°F") : (degree = "Â°C");
        console.log(units);
        console.log(degree);
        // e.target.innerHTML = `
        //   <div class="city-temp">${units}<sup>${degree}</sup></div>
        //   `;
      }
    });

    //!Bubling --> ile kartta herhangi biryere tÄ±klayÄ±nca en dÄ±ÅŸtaki click tetiklensin ve belirlenen linke gitsin.
    // createdLi.addEventListener("click", (e)=>{
    //     alert(`LI element is clicked!!`);
    //     window.location.href = "https://clarusway.com";
    // });
    // createdLi.querySelector("figure").addEventListener("click", (e)=>{
    //     alert(`FIGURE element is clicked!!`);
    //     //STOP BUBBLING
    //     //e.stopPropagation();
    //     // window.location.href = "https://clarusway.com";
    // });
    // createdLi.querySelector("img").addEventListener("click", (e)=>{
    //     alert(`IMG element is clicked!!`);
    //     // window.location.href = "https://clarusway.com";
    // });

    //* olmayan ÅŸehirde hata verdirmek iÃ§in
  } catch (error) {
    msg.innerText = `404 (City Not Found)`;
    setTimeout(() => {
      msg.innerText = ""; // burada form.reset() olmaz.
    }, 3000); // 3sn sonra mesaj kaybolsun
    // form.reset();
  }
  form.reset(); // inputu temizlemek iÃ§in
};

document.querySelector(".options").addEventListener("click", (e) => {
  if (e.target.parentElement.classList.contains("languages")) {
    lang = e.target.value;
  } else if (e.target.parentElement.classList.contains("switch")) {
    units = e.target.value;
    degree = e.target.nextElementSibling.id;
  }

});

//window onload
// document.querySelector(".cities").addEventListener("click", (e) => {
//   if (e.target.tagName == "IMG") {
//     alert("img is clicked!!!");
//   }
// });
